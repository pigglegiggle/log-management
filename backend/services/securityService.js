const connection = require('../db');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ã‡πâ‡∏≥‡πÜ (Updated for Simplified Schema + No Duplicate Alerts)
async function checkFailedLoginAttempts() {
  try {
    // ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);
    const timeStr = fiveMinutesAgo.toISOString().slice(0, 19).replace('T', ' ');
    
    // ‡πÉ‡∏ä‡πâ simplified schema - query ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏≤‡∏Å logs table
    const [failedLogins] = await connection.query(`
      SELECT 
        l.src_ip as ip, 
        COUNT(*) as attempt_count, 
        GROUP_CONCAT(DISTINCT l.user) as users,
        t.name as tenant_name
      FROM logs l
      LEFT JOIN tenants t ON l.tenant_id = t.id
      WHERE (l.event_type LIKE '%login%fail%' OR l.event_type LIKE '%LogonFailed%' OR l.event_type LIKE '%app_login_failed%')
        AND l.timestamp >= ?
        AND l.src_ip IS NOT NULL
      GROUP BY l.src_ip, t.name
      HAVING attempt_count >= 3
    `, [timeStr]);

    console.log(`üîç Checking failed logins since ${timeStr}, found ${failedLogins.length} suspicious IPs`);
    
    if (failedLogins.length > 0) {
      let newAlertsCount = 0;
      
      for (const login of failedLogins) {
        try {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ alert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IP ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
          const oneHourTimeStr = oneHourAgo.toISOString().slice(0, 19).replace('T', ' ');
          
          const [existingAlerts] = await connection.query(`
            SELECT COUNT(*) as count 
            FROM alerts 
            WHERE alert_type = 'failed_login_attempts' 
              AND ip_address = ? 
              AND created_at >= ?
          `, [login.ip, oneHourTimeStr]);
          
          if (existingAlerts[0].count === 0) {
            // ‡πÑ‡∏°‡πà‡∏°‡∏µ alert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IP ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            await connection.query(`
              INSERT INTO alerts (alert_type, message, ip_address, details, created_at) 
              VALUES (?, ?, ?, ?, NOW())
            `, [
              'failed_login_attempts',
              `‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ${login.attempt_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å IP ${login.ip} (${login.tenant_name || 'Unknown'}) ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ`,
              login.ip,
              JSON.stringify({
                attempt_count: login.attempt_count,
                users: login.users,
                tenant: login.tenant_name,
                time_window: '5 minutes',
                timestamp: new Date().toISOString()
              })
            ]);
            
            newAlertsCount++;
            console.log(`üö® NEW alert created for IP ${login.ip} (${login.attempt_count} attempts)`);
          } else {
            console.log(`‚è∏Ô∏è  Alert for IP ${login.ip} already exists within 1 hour, skipping...`);
          }
        } catch (insertErr) {
          console.error(`‚ùå Error creating alert for IP ${login.ip}:`, insertErr);
        }
      }
      
      if (newAlertsCount > 0) {
        console.log(`‚úÖ ${newAlertsCount} NEW alerts created (${failedLogins.length - newAlertsCount} skipped as duplicates)`);
      } else {
        console.log(`‚úÖ No new alerts needed (all ${failedLogins.length} IPs already have recent alerts)`);
      }
    } else {
      console.log('‚úÖ No suspicious failed login activity detected');
    }
  } catch (err) {
    console.error('‚ùå Error checking failed login attempts:', err);
  }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô background service
function startSecurityMonitoring() {
  // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
  setInterval(checkFailedLoginAttempts, 5000);
  console.log('Security monitoring service started - checking every 5 seconds');
}


module.exports = {
  checkFailedLoginAttempts,
  startSecurityMonitoring
};

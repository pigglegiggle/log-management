const connection = require('../db');

// Data retention policy - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 7 ‡∏ß‡∏±‡∏ô
const RETENTION_DAYS = 7;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
async function cleanupOldLogs() {
  try {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 7 ‡∏ß‡∏±‡∏ô
    const retentionDate = new Date();
    retentionDate.setDate(retentionDate.getDate() - RETENTION_DAYS);
    const retentionDateStr = retentionDate.toISOString().slice(0, 19).replace('T', ' ');

    // ‡∏•‡∏ö logs ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å logs table
    const [logsResult] = await connection.query(`
      DELETE FROM logs 
      WHERE created_at < ?
    `, [retentionDateStr]);
    
    // ‡∏•‡∏ö alerts ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å alerts table (‡πÄ‡∏Å‡πá‡∏ö 30 ‡∏ß‡∏±‡∏ô)
    const alertRetentionDate = new Date();
    alertRetentionDate.setDate(alertRetentionDate.getDate() - 30);
    const alertRetentionDateStr = alertRetentionDate.toISOString().slice(0, 19).replace('T', ' ');
    
    const [alertsResult] = await connection.query(`
      DELETE FROM alerts 
      WHERE created_at < ?
    `, [alertRetentionDateStr]);
    
    console.log(`‚úÖ Cleanup completed:`);
    console.log(`   - Deleted ${logsResult.affectedRows} logs older than ${RETENTION_DAYS} days`);
    console.log(`   - Deleted ${alertsResult.affectedRows} alerts older than 30 days`);
    
    // Optional: OPTIMIZE TABLE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà disk
    await connection.query('OPTIMIZE TABLE logs');
    await connection.query('OPTIMIZE TABLE alerts');
    console.log(`üîß Database tables optimized`);
    
  } catch (err) {
    console.error('‚ùå Error during cleanup:', err);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
async function getDataSizeInfo() {
  try {
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô logs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const [totalLogs] = await connection.query('SELECT COUNT(*) as count FROM logs');
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô logs ‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const retentionDate = new Date();
    retentionDate.setDate(retentionDate.getDate() - RETENTION_DAYS);
    const retentionDateStr = retentionDate.toISOString().slice(0, 19).replace('T', ' ');
    
    const [recentLogs] = await connection.query(`
      SELECT COUNT(*) as count FROM logs WHERE created_at >= ?
    `, [retentionDateStr]);
    
    const [oldLogs] = await connection.query(`
      SELECT COUNT(*) as count FROM logs WHERE created_at < ?
    `, [retentionDateStr]);
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô alerts
    const [totalAlerts] = await connection.query('SELECT COUNT(*) as count FROM alerts');
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    const [tableSize] = await connection.query(`
      SELECT 
        table_name as tableName,
        ROUND(((data_length + index_length) / 1024 / 1024), 2) as sizeMB
      FROM information_schema.TABLES 
      WHERE table_schema = 'logdb' 
        AND table_name IN ('logs', 'alerts')
      ORDER BY (data_length + index_length) DESC
    `);
    
    const info = {
      totalLogs: totalLogs[0].count,
      recentLogs: recentLogs[0].count,
      oldLogs: oldLogs[0].count,
      totalAlerts: totalAlerts[0].count,
      retentionDays: RETENTION_DAYS,
      tablesSizeMB: tableSize
    };
    
    console.log('Database Statistics:');
    console.log(`   - Total logs: ${info.totalLogs.toLocaleString()}`);
    console.log(`   - Recent logs (${RETENTION_DAYS} days): ${info.recentLogs.toLocaleString()}`);
    console.log(`   - Old logs (ready for cleanup): ${info.oldLogs.toLocaleString()}`);
    console.log(`   - Total alerts: ${info.totalAlerts.toLocaleString()}`);
    console.log(`   - Tables size:`, info.tablesSizeMB);
    
    return info;
    
  } catch (err) {
    console.error('‚ùå Error getting data size info:', err);
    return null;
  }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô retention service
function startRetentionService() {
  // ‡∏£‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  console.log('üöÄ Starting Data Retention Service...');
  getDataSizeInfo();
  
  // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 02:00 ‡∏ô. (7200000 ms = 2 hours)
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ (1800000 ms)
  const CLEANUP_INTERVAL = 30 * 60 * 1000; // 30 minutes
  
  setInterval(async () => {
    console.log('üïê Running scheduled cleanup...');
    await getDataSizeInfo();
    await cleanupOldLogs();
  }, CLEANUP_INTERVAL);
  
  console.log(`‚è∞ Retention service scheduled - cleanup every 30 minutes`);
  console.log(`üìù Retention policy: Keep logs for ${RETENTION_DAYS} days, alerts for 30 days`);
}


async function manualCleanup() {
  console.log('üîß Manual cleanup initiated...');
  await getDataSizeInfo();
  await cleanupOldLogs();
  await getDataSizeInfo();
}

module.exports = {
  startRetentionService,
  cleanupOldLogs,
  getDataSizeInfo,
  manualCleanup,
  RETENTION_DAYS
};
